{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/lib/prisma.ts","../../server/lib/auth.ts","../../server/routes/auth.ts","../../server/routes/students.ts","../../server/routes/teachers.ts","../../server/routes/marks.ts","../../server/routes/attendance.ts","../../server/routes/fees.ts","../../server/routes/academic-years.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { PrismaClient } from '@prisma/client';\r\n\r\n// PrismaClient is attached to the `global` object in development to prevent\r\n// exhausting your database connection limit.\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n\r\n","import { RequestHandler } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key';\r\n\r\nexport interface JWTPayload {\r\n  userId: string;\r\n  email: string;\r\n  role: 'ADMIN' | 'TEACHER';\r\n}\r\n\r\nexport const generateToken = (payload: JWTPayload): string => {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\r\n};\r\n\r\nexport const verifyToken = (token: string): JWTPayload | null => {\r\n  try {\r\n    return jwt.verify(token, JWT_SECRET) as JWTPayload;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const authMiddleware: RequestHandler = (req, res, next) => {\r\n  const token = req.headers.authorization?.replace('Bearer ', '');\r\n\r\n  if (!token) {\r\n    res.status(401).json({ error: 'Authentication required' });\r\n    return;\r\n  }\r\n\r\n  const payload = verifyToken(token);\r\n  if (!payload) {\r\n    res.status(401).json({ error: 'Invalid or expired token' });\r\n    return;\r\n  }\r\n\r\n  (req as any).user = payload;\r\n  next();\r\n};\r\n\r\nexport const adminOnly: RequestHandler = (req, res, next) => {\r\n  const user = (req as any).user as JWTPayload;\r\n  \r\n  if (user.role !== 'ADMIN') {\r\n    res.status(403).json({ error: 'Admin access required' });\r\n    return;\r\n  }\r\n\r\n  next();\r\n};\r\n\r\n","import { RequestHandler } from 'express';\r\nimport prisma from '../lib/prisma';\r\nimport { generateToken } from '../lib/auth';\r\n\r\n// Development mode: skip bcrypt for now\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\n\r\nexport const handleLogin: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { username, password, role } = req.body;\r\n\r\n    if (!username || !password || !role) {\r\n      res.status(400).json({ error: 'Username, password, and role are required' });\r\n      return;\r\n    }\r\n\r\n    // Find user\r\n    const user = await prisma.user.findFirst({\r\n      where: {\r\n        OR: [\r\n          { username },\r\n          { email: username }\r\n        ],\r\n        role: role.toUpperCase(),\r\n        isActive: true\r\n      },\r\n      include: {\r\n        teacher: true,\r\n        admin: true\r\n      }\r\n    });\r\n\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Invalid credentials' });\r\n      return;\r\n    }\r\n\r\n    // For development, use simple password check. In production, verify with bcrypt\r\n    const isValidPassword = isDev\r\n      ? password === 'admin123' || password === 'teacher123' || password === user.password\r\n      : password === user.password; // Simplified for now\r\n\r\n    if (!isValidPassword) {\r\n      res.status(401).json({ error: 'Invalid credentials' });\r\n      return;\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = generateToken({\r\n      userId: user.id,\r\n      email: user.email,\r\n      role: user.role\r\n    });\r\n\r\n    // Get profile data\r\n    const profile = user.role === 'ADMIN' ? user.admin : user.teacher;\r\n\r\n    res.json({\r\n      token,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        username: user.username,\r\n        role: user.role,\r\n        profile\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\nexport const handleRegister: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { email, username, password, role, name, phone } = req.body;\r\n\r\n    // Check if user exists\r\n    const existingUser = await prisma.user.findFirst({\r\n      where: {\r\n        OR: [\r\n          { email },\r\n          { username }\r\n        ]\r\n      }\r\n    });\r\n\r\n    if (existingUser) {\r\n      res.status(400).json({ error: 'User already exists' });\r\n      return;\r\n    }\r\n\r\n    // Hash password (or use plain in dev mode)\r\n    const hashedPassword = isDev ? password : password; // Simplified for now\r\n\r\n    // Create user with profile\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        email,\r\n        username,\r\n        password: hashedPassword,\r\n        role: role.toUpperCase(),\r\n        ...(role.toUpperCase() === 'ADMIN' ? {\r\n          admin: {\r\n            create: {\r\n              name,\r\n              phone\r\n            }\r\n          }\r\n        } : {\r\n          teacher: {\r\n            create: {\r\n              name,\r\n              email,\r\n              phone,\r\n              employeeId: `TC-${Date.now()}`,\r\n              subjects: JSON.stringify([])\r\n            }\r\n          }\r\n        })\r\n      },\r\n      include: {\r\n        admin: true,\r\n        teacher: true\r\n      }\r\n    });\r\n\r\n    const token = generateToken({\r\n      userId: user.id,\r\n      email: user.email,\r\n      role: user.role\r\n    });\r\n\r\n    res.status(201).json({\r\n      token,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        username: user.username,\r\n        role: user.role,\r\n        profile: user.role === 'ADMIN' ? user.admin : user.teacher\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\nexport const handleGetMe: RequestHandler = async (req, res) => {\r\n  try {\r\n    const userId = (req as any).user.userId;\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: { id: userId },\r\n      include: {\r\n        admin: true,\r\n        teacher: true\r\n      }\r\n    });\r\n\r\n    if (!user) {\r\n      res.status(404).json({ error: 'User not found' });\r\n      return;\r\n    }\r\n\r\n    res.json({\r\n      id: user.id,\r\n      email: user.email,\r\n      username: user.username,\r\n      role: user.role,\r\n      profile: user.role === 'ADMIN' ? user.admin : user.teacher\r\n    });\r\n  } catch (error) {\r\n    console.error('Get user error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n","import { RequestHandler } from 'express';\r\nimport prisma from '../lib/prisma';\r\n\r\n// Get all students\r\nexport const handleGetStudents: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { academicYearId } = req.query;\r\n\r\n    const students = await prisma.student.findMany({\r\n      where: academicYearId ? { academicYearId: academicYearId as string } : {},\r\n      include: {\r\n        academicYear: true\r\n      },\r\n      orderBy: {\r\n        name: 'asc'\r\n      }\r\n    });\r\n\r\n    res.json(students);\r\n  } catch (error) {\r\n    console.error('Get students error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get single student\r\nexport const handleGetStudent: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const student = await prisma.student.findUnique({\r\n      where: { id },\r\n      include: {\r\n        academicYear: true,\r\n        marks: {\r\n          include: {\r\n            class: true,\r\n            teacher: true\r\n          }\r\n        },\r\n        attendances: {\r\n          include: {\r\n            class: true\r\n          },\r\n          orderBy: {\r\n            date: 'desc'\r\n          },\r\n          take: 30\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!student) {\r\n      res.status(404).json({ error: 'Student not found' });\r\n      return;\r\n    }\r\n\r\n    res.json(student);\r\n  } catch (error) {\r\n    console.error('Get student error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Create student (Admin only)\r\nexport const handleCreateStudent: RequestHandler = async (req, res) => {\r\n  try {\r\n    const {\r\n      studentId,\r\n      name,\r\n      gender,\r\n      dateOfBirth,\r\n      className,\r\n      email,\r\n      phone,\r\n      parentPhone,\r\n      address,\r\n      photoUrl,\r\n      academicYearId\r\n    } = req.body;\r\n\r\n    // Check if student ID already exists\r\n    const existing = await prisma.student.findUnique({\r\n      where: { studentId }\r\n    });\r\n\r\n    if (existing) {\r\n      res.status(400).json({ error: 'Student ID already exists' });\r\n      return;\r\n    }\r\n\r\n    const student = await prisma.student.create({\r\n      data: {\r\n        studentId,\r\n        name,\r\n        gender,\r\n        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n        className,\r\n        email,\r\n        phone,\r\n        parentPhone,\r\n        address,\r\n        photoUrl,\r\n        academicYearId\r\n      },\r\n      include: {\r\n        academicYear: true\r\n      }\r\n    });\r\n\r\n    res.status(201).json(student);\r\n  } catch (error) {\r\n    console.error('Create student error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Update student (Admin only)\r\nexport const handleUpdateStudent: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const data = req.body;\r\n\r\n    const student = await prisma.student.update({\r\n      where: { id },\r\n      data: {\r\n        ...data,\r\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth) : undefined\r\n      },\r\n      include: {\r\n        academicYear: true\r\n      }\r\n    });\r\n\r\n    res.json(student);\r\n  } catch (error) {\r\n    console.error('Update student error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Delete student (Admin only)\r\nexport const handleDeleteStudent: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    await prisma.student.delete({\r\n      where: { id }\r\n    });\r\n\r\n    res.json({ message: 'Student deleted successfully' });\r\n  } catch (error) {\r\n    console.error('Delete student error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get all public results (Public)\r\nexport const handleGetAllPublicResults: RequestHandler = async (req, res) => {\r\n  try {\r\n    // Mock response since we're using localStorage on frontend\r\n    // In a real application, this would query the database\r\n    res.json({\r\n      resultsPublished: true,\r\n      academicYear: \"2024-2025\",\r\n      students: [\r\n        {\r\n          id: \"DU-2025-001\",\r\n          name: \"Ayaan Ali\",\r\n          className: \"Grade 8A\",\r\n          average: 84,\r\n          grade: \"B+\",\r\n          subjects: [\r\n            { subject: \"Mathematics\", mark: 88 },\r\n            { subject: \"English\", mark: 81 },\r\n            { subject: \"Somali\", mark: 90 },\r\n            { subject: \"Physics\", mark: 79 },\r\n            { subject: \"Chemistry\", mark: 84 }\r\n          ]\r\n        },\r\n        {\r\n          id: \"DU-2025-002\",\r\n          name: \"Fatima Omar\",\r\n          className: \"Grade 8A\",\r\n          average: 88,\r\n          grade: \"B+\",\r\n          subjects: [\r\n            { subject: \"Mathematics\", mark: 92 },\r\n            { subject: \"English\", mark: 85 },\r\n            { subject: \"Somali\", mark: 88 },\r\n            { subject: \"Biology\", mark: 90 },\r\n            { subject: \"History\", mark: 87 }\r\n          ]\r\n        },\r\n        {\r\n          id: \"DU-2025-003\",\r\n          name: \"Hassan Ahmed\",\r\n          className: \"Grade 8B\",\r\n          average: 78,\r\n          grade: \"C+\",\r\n          subjects: [\r\n            { subject: \"Mathematics\", mark: 75 },\r\n            { subject: \"English\", mark: 78 },\r\n            { subject: \"Somali\", mark: 82 },\r\n            { subject: \"Physics\", mark: 73 },\r\n            { subject: \"Chemistry\", mark: 80 }\r\n          ]\r\n        },\r\n        {\r\n          id: \"DU-2025-004\",\r\n          name: \"Khadija Yusuf\",\r\n          className: \"Grade 8B\",\r\n          average: 91,\r\n          grade: \"A-\",\r\n          subjects: [\r\n            { subject: \"Mathematics\", mark: 95 },\r\n            { subject: \"English\", mark: 89 },\r\n            { subject: \"Somali\", mark: 91 },\r\n            { subject: \"Biology\", mark: 93 },\r\n            { subject: \"Geography\", mark: 88 }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n  } catch (error) {\r\n    console.error('Get all public results error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get student results by Student ID (Public)\r\nexport const handleGetStudentResults: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { studentId } = req.params;\r\n\r\n    // Mock response since we're using localStorage on frontend\r\n    // In a real application, this would query the database\r\n    res.json({\r\n      student: {\r\n        id: studentId,\r\n        name: \"Sample Student\",\r\n        className: \"Form 4A\",\r\n        academicYear: \"2024-2025\"\r\n      },\r\n      resultsPublished: true,\r\n      marks: [\r\n        {\r\n          subject: \"Mathematics\",\r\n          midterm: 85,\r\n          final: 90,\r\n          homework: 88,\r\n          total: 263,\r\n          grade: \"B+\"\r\n        },\r\n        {\r\n          subject: \"English\",\r\n          midterm: 78,\r\n          final: 82,\r\n          homework: 80,\r\n          total: 240,\r\n          grade: \"B\"\r\n        }\r\n      ]\r\n    });\r\n  } catch (error) {\r\n    console.error('Get student results error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n","import { RequestHandler } from 'express';\r\nimport prisma from '../lib/prisma';\r\n\r\n// Get all teachers\r\nexport const handleGetTeachers: RequestHandler = async (req, res) => {\r\n  try {\r\n    const teachers = await prisma.teacher.findMany({\r\n      include: {\r\n        user: {\r\n          select: {\r\n            email: true,\r\n            isActive: true\r\n          }\r\n        },\r\n        classes: {\r\n          include: {\r\n            academicYear: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: {\r\n        name: 'asc'\r\n      }\r\n    });\r\n\r\n    res.json(teachers);\r\n  } catch (error) {\r\n    console.error('Get teachers error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get single teacher\r\nexport const handleGetTeacher: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const teacher = await prisma.teacher.findUnique({\r\n      where: { id },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            email: true,\r\n            username: true,\r\n            isActive: true\r\n          }\r\n        },\r\n        classes: {\r\n          include: {\r\n            academicYear: true\r\n          }\r\n        },\r\n        marks: {\r\n          include: {\r\n            student: true,\r\n            class: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!teacher) {\r\n      res.status(404).json({ error: 'Teacher not found' });\r\n      return;\r\n    }\r\n\r\n    res.json(teacher);\r\n  } catch (error) {\r\n    console.error('Get teacher error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Update teacher profile\r\nexport const handleUpdateTeacher: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, phone, photoUrl, subjects } = req.body;\r\n\r\n    const teacher = await prisma.teacher.update({\r\n      where: { id },\r\n      data: {\r\n        name,\r\n        phone,\r\n        photoUrl,\r\n        subjects: subjects ? JSON.stringify(subjects) : undefined\r\n      }\r\n    });\r\n\r\n    res.json(teacher);\r\n  } catch (error) {\r\n    console.error('Update teacher error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get teacher's classes\r\nexport const handleGetTeacherClasses: RequestHandler = async (req, res) => {\r\n  try {\r\n    const teacherId = (req as any).user.profile?.id;\r\n\r\n    if (!teacherId) {\r\n      res.status(400).json({ error: 'Teacher ID not found' });\r\n      return;\r\n    }\r\n\r\n    const classes = await prisma.class.findMany({\r\n      where: {\r\n        teacherId,\r\n        isActive: true\r\n      },\r\n      include: {\r\n        academicYear: true,\r\n        teacher: true\r\n      },\r\n      orderBy: {\r\n        name: 'asc'\r\n      }\r\n    });\r\n\r\n    res.json(classes);\r\n  } catch (error) {\r\n    console.error('Get teacher classes error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n","import { RequestHandler } from 'express';\r\nimport prisma from '../lib/prisma';\r\n\r\n// Get marks by class\r\nexport const handleGetMarksByClass: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { classId } = req.params;\r\n\r\n    const marks = await prisma.mark.findMany({\r\n      where: { classId },\r\n      include: {\r\n        student: true,\r\n        class: true,\r\n        teacher: true\r\n      },\r\n      orderBy: {\r\n        student: {\r\n          name: 'asc'\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json(marks);\r\n  } catch (error) {\r\n    console.error('Get marks error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Create or update mark\r\nexport const handleUpsertMark: RequestHandler = async (req, res) => {\r\n  try {\r\n    const {\r\n      id,\r\n      studentId,\r\n      classId,\r\n      teacherId,\r\n      academicYearId,\r\n      subject,\r\n      midterm,\r\n      final,\r\n      homework\r\n    } = req.body;\r\n\r\n    // Calculate total and percentage\r\n    const total = (midterm || 0) + (final || 0) + (homework || 0);\r\n    const avg = total / 3;\r\n    const percentage = Math.round(avg);\r\n    \r\n    // Keep grade for backward compatibility, but use percentage as primary\r\n    let grade = `${percentage}%`;\r\n    if (percentage >= 85) grade = `${percentage}% (Excellent)`;\r\n    else if (percentage >= 70) grade = `${percentage}% (Good)`;\r\n    else if (percentage >= 50) grade = `${percentage}% (Satisfactory)`;\r\n    else grade = `${percentage}% (Needs Improvement)`;\r\n\r\n    const mark = id\r\n      ? await prisma.mark.update({\r\n          where: { id },\r\n          data: {\r\n            midterm,\r\n            final,\r\n            homework,\r\n            total,\r\n            grade\r\n          },\r\n          include: {\r\n            student: true,\r\n            class: true\r\n          }\r\n        })\r\n      : await prisma.mark.create({\r\n          data: {\r\n            studentId,\r\n            classId,\r\n            teacherId,\r\n            academicYearId,\r\n            subject,\r\n            midterm,\r\n            final,\r\n            homework,\r\n            total,\r\n            grade,\r\n            status: 'DRAFT'\r\n          },\r\n          include: {\r\n            student: true,\r\n            class: true\r\n          }\r\n        });\r\n\r\n    res.json(mark);\r\n  } catch (error) {\r\n    console.error('Upsert mark error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Submit marks to admin\r\nexport const handleSubmitMarks: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { markIds } = req.body;\r\n\r\n    await prisma.mark.updateMany({\r\n      where: {\r\n        id: { in: markIds }\r\n      },\r\n      data: {\r\n        status: 'SUBMITTED',\r\n        submittedAt: new Date()\r\n      }\r\n    });\r\n\r\n    res.json({ message: 'Marks submitted successfully' });\r\n  } catch (error) {\r\n    console.error('Submit marks error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Approve marks (Admin only)\r\nexport const handleApproveMarks: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { markIds } = req.body;\r\n\r\n    await prisma.mark.updateMany({\r\n      where: {\r\n        id: { in: markIds },\r\n        status: 'SUBMITTED'\r\n      },\r\n      data: {\r\n        status: 'APPROVED',\r\n        approvedAt: new Date()\r\n      }\r\n    });\r\n\r\n    res.json({ message: 'Marks approved successfully' });\r\n  } catch (error) {\r\n    console.error('Approve marks error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Publish results (Admin only)\r\nexport const handlePublishResults: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { academicYearId } = req.body;\r\n\r\n    // Update all approved marks to published\r\n    await prisma.mark.updateMany({\r\n      where: {\r\n        academicYearId,\r\n        status: 'APPROVED'\r\n      },\r\n      data: {\r\n        status: 'PUBLISHED'\r\n      }\r\n    });\r\n\r\n    // Update settings to show results are published\r\n    await prisma.settings.upsert({\r\n      where: { key: 'resultsPublished' },\r\n      create: { key: 'resultsPublished', value: 'true' },\r\n      update: { value: 'true' }\r\n    });\r\n\r\n    res.json({ message: 'Results published successfully' });\r\n  } catch (error) {\r\n    console.error('Publish results error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Close results (Admin only)\r\nexport const handleCloseResults: RequestHandler = async (req, res) => {\r\n  try {\r\n    await prisma.settings.upsert({\r\n      where: { key: 'resultsPublished' },\r\n      create: { key: 'resultsPublished', value: 'false' },\r\n      update: { value: 'false' }\r\n    });\r\n\r\n    res.json({ message: 'Results closed successfully' });\r\n  } catch (error) {\r\n    console.error('Close results error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n","import { RequestHandler } from 'express';\r\nimport prisma from '../lib/prisma';\r\n\r\n// Get attendance by class and date\r\nexport const handleGetAttendance: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { classId, date } = req.query;\r\n\r\n    const attendance = await prisma.attendance.findMany({\r\n      where: {\r\n        classId: classId as string,\r\n        date: date ? new Date(date as string) : undefined\r\n      },\r\n      include: {\r\n        student: true,\r\n        class: true\r\n      },\r\n      orderBy: {\r\n        student: {\r\n          name: 'asc'\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json(attendance);\r\n  } catch (error) {\r\n    console.error('Get attendance error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Mark attendance\r\nexport const handleMarkAttendance: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { records } = req.body; // Array of { studentId, classId, date, status }\r\n\r\n    const teacherId = (req as any).user.profile?.id;\r\n    if (!teacherId) {\r\n      res.status(400).json({ error: 'Teacher ID not found' });\r\n      return;\r\n    }\r\n\r\n    // Get class to get academic year\r\n    const classInfo = await prisma.class.findUnique({\r\n      where: { id: records[0].classId }\r\n    });\r\n\r\n    if (!classInfo) {\r\n      res.status(404).json({ error: 'Class not found' });\r\n      return;\r\n    }\r\n\r\n    const attendanceRecords = await Promise.all(\r\n      records.map(async (record: any) => {\r\n        return prisma.attendance.upsert({\r\n          where: {\r\n            studentId_classId_date: {\r\n              studentId: record.studentId,\r\n              classId: record.classId,\r\n              date: new Date(record.date)\r\n            }\r\n          },\r\n          create: {\r\n            studentId: record.studentId,\r\n            classId: record.classId,\r\n            teacherId,\r\n            academicYearId: classInfo.academicYearId,\r\n            date: new Date(record.date),\r\n            status: record.status,\r\n            notes: record.notes\r\n          },\r\n          update: {\r\n            status: record.status,\r\n            notes: record.notes\r\n          }\r\n        });\r\n      })\r\n    );\r\n\r\n    res.json(attendanceRecords);\r\n  } catch (error) {\r\n    console.error('Mark attendance error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get attendance statistics\r\nexport const handleGetAttendanceStats: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { classId, startDate, endDate } = req.query;\r\n\r\n    const attendance = await prisma.attendance.findMany({\r\n      where: {\r\n        classId: classId as string,\r\n        date: {\r\n          gte: startDate ? new Date(startDate as string) : undefined,\r\n          lte: endDate ? new Date(endDate as string) : undefined\r\n        }\r\n      }\r\n    });\r\n\r\n    const stats = {\r\n      total: attendance.length,\r\n      present: attendance.filter(a => a.status === 'PRESENT').length,\r\n      absent: attendance.filter(a => a.status === 'ABSENT').length,\r\n      late: attendance.filter(a => a.status === 'LATE').length,\r\n      excused: attendance.filter(a => a.status === 'EXCUSED').length\r\n    };\r\n\r\n    res.json(stats);\r\n  } catch (error) {\r\n    console.error('Get attendance stats error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n","import { RequestHandler } from \"express\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { z } from \"zod\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Validation schemas\r\nconst createFeeSchema = z.object({\r\n  studentId: z.string().min(1, \"Student ID is required\"),\r\n  academicYearId: z.string().min(1, \"Academic Year ID is required\"),\r\n  feeType: z.enum([\"TUITION\", \"EXAM\", \"LIBRARY\", \"TRANSPORT\", \"HOSTEL\", \"UNIFORM\", \"BOOKS\", \"OTHER\"]),\r\n  amount: z.number().positive(\"Amount must be positive\"),\r\n  dueDate: z.string().datetime(\"Invalid due date\"),\r\n  notes: z.string().optional(),\r\n});\r\n\r\nconst updateFeeSchema = createFeeSchema.partial();\r\n\r\n// Auto-update overdue fees\r\nasync function updateOverdueFees() {\r\n  const today = new Date();\r\n  await prisma.fee.updateMany({\r\n    where: {\r\n      status: \"PENDING\",\r\n      dueDate: {\r\n        lt: today,\r\n      },\r\n    },\r\n    data: {\r\n      status: \"OVERDUE\",\r\n    },\r\n  });\r\n}\r\n\r\n// GET /api/fees - List all fees with auto overdue update\r\nexport const getFees: RequestHandler = async (req, res) => {\r\n  try {\r\n    // Auto-update overdue fees\r\n    await updateOverdueFees();\r\n\r\n    const { page = \"1\", limit = \"10\", search, status, classId, sortBy = \"dueDate\", sortOrder = \"asc\" } = req.query;\r\n\r\n    const pageNum = parseInt(page as string);\r\n    const limitNum = parseInt(limit as string);\r\n    const skip = (pageNum - 1) * limitNum;\r\n\r\n    // Build where clause\r\n    const where: any = {};\r\n    \r\n    if (search) {\r\n      where.OR = [\r\n        { student: { name: { contains: search as string, mode: \"insensitive\" } } },\r\n        { student: { studentId: { contains: search as string, mode: \"insensitive\" } } },\r\n        { student: { className: { contains: search as string, mode: \"insensitive\" } } },\r\n      ];\r\n    }\r\n\r\n    if (status && status !== \"ALL\") {\r\n      where.status = status;\r\n    }\r\n\r\n    if (classId && classId !== \"ALL\") {\r\n      // Find the class name by class ID\r\n      const classRecord = await prisma.class.findUnique({\r\n        where: { id: classId as string },\r\n        select: { name: true },\r\n      });\r\n      \r\n      if (classRecord) {\r\n        where.student = {\r\n          ...where.student,\r\n          className: classRecord.name,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Build orderBy clause\r\n    const orderBy: any = {};\r\n    if (sortBy === \"student\") {\r\n      orderBy.student = { name: sortOrder };\r\n    } else if (sortBy === \"amount\") {\r\n      orderBy.amount = sortOrder;\r\n    } else if (sortBy === \"dueDate\") {\r\n      orderBy.dueDate = sortOrder;\r\n    } else {\r\n      orderBy.createdAt = \"desc\";\r\n    }\r\n\r\n    const [fees, total] = await Promise.all([\r\n      prisma.fee.findMany({\r\n        where,\r\n        include: {\r\n          student: {\r\n            select: {\r\n              id: true,\r\n              studentId: true,\r\n              name: true,\r\n              className: true,\r\n            },\r\n          },\r\n          academicYear: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n            },\r\n          },\r\n        },\r\n        orderBy,\r\n        skip,\r\n        take: limitNum,\r\n      }),\r\n      prisma.fee.count({ where }),\r\n    ]);\r\n\r\n    // Get summary statistics\r\n    const summary = await prisma.fee.groupBy({\r\n      by: [\"status\"],\r\n      _sum: {\r\n        amount: true,\r\n      },\r\n      _count: {\r\n        id: true,\r\n      },\r\n    });\r\n\r\n    const summaryData = {\r\n      totalPaid: summary.find(s => s.status === \"PAID\")?._sum.amount || 0,\r\n      totalPending: summary.find(s => s.status === \"PENDING\")?._sum.amount || 0,\r\n      totalOverdue: summary.find(s => s.status === \"OVERDUE\")?._sum.amount || 0,\r\n      paidCount: summary.find(s => s.status === \"PAID\")?._count.id || 0,\r\n      pendingCount: summary.find(s => s.status === \"PENDING\")?._count.id || 0,\r\n      overdueCount: summary.find(s => s.status === \"OVERDUE\")?._count.id || 0,\r\n    };\r\n\r\n    res.json({\r\n      fees,\r\n      pagination: {\r\n        page: pageNum,\r\n        limit: limitNum,\r\n        total,\r\n        pages: Math.ceil(total / limitNum),\r\n      },\r\n      summary: summaryData,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching fees:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch fees\" });\r\n  }\r\n};\r\n\r\n// POST /api/fees - Create new fee\r\nexport const createFee: RequestHandler = async (req, res) => {\r\n  try {\r\n    const validatedData = createFeeSchema.parse(req.body);\r\n\r\n    // Verify student exists\r\n    const student = await prisma.student.findUnique({\r\n      where: { id: validatedData.studentId },\r\n      include: { academicYear: true },\r\n    });\r\n\r\n    if (!student) {\r\n      return res.status(404).json({ error: \"Student not found\" });\r\n    }\r\n\r\n    const fee = await prisma.fee.create({\r\n      data: {\r\n        studentId: validatedData.studentId,\r\n        academicYearId: validatedData.academicYearId,\r\n        feeType: validatedData.feeType,\r\n        amount: validatedData.amount,\r\n        dueDate: new Date(validatedData.dueDate),\r\n        status: \"PENDING\",\r\n        notes: validatedData.notes,\r\n      },\r\n      include: {\r\n        student: {\r\n          select: {\r\n            id: true,\r\n            studentId: true,\r\n            name: true,\r\n            className: true,\r\n          },\r\n        },\r\n        academicYear: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.status(201).json(fee);\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\r\n    }\r\n    console.error(\"Error creating fee:\", error);\r\n    res.status(500).json({ error: \"Failed to create fee\" });\r\n  }\r\n};\r\n\r\n// PUT /api/fees/:id - Update fee\r\nexport const updateFee: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const validatedData = updateFeeSchema.parse(req.body);\r\n\r\n    const fee = await prisma.fee.update({\r\n      where: { id },\r\n      data: {\r\n        ...validatedData,\r\n        dueDate: validatedData.dueDate ? new Date(validatedData.dueDate) : undefined,\r\n      },\r\n      include: {\r\n        student: {\r\n          select: {\r\n            id: true,\r\n            studentId: true,\r\n            name: true,\r\n            className: true,\r\n          },\r\n        },\r\n        academicYear: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.json(fee);\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\r\n    }\r\n    console.error(\"Error updating fee:\", error);\r\n    res.status(500).json({ error: \"Failed to update fee\" });\r\n  }\r\n};\r\n\r\n// DELETE /api/fees/:id - Delete fee\r\nexport const deleteFee: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    await prisma.fee.delete({\r\n      where: { id },\r\n    });\r\n\r\n    res.json({ message: \"Fee deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting fee:\", error);\r\n    res.status(500).json({ error: \"Failed to delete fee\" });\r\n  }\r\n};\r\n\r\n// PATCH /api/fees/:id/paid - Mark fee as paid\r\nexport const markAsPaid: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const fee = await prisma.fee.update({\r\n      where: { id },\r\n      data: {\r\n        status: \"PAID\",\r\n        paymentDate: new Date(),\r\n      },\r\n      include: {\r\n        student: {\r\n          select: {\r\n            id: true,\r\n            studentId: true,\r\n            name: true,\r\n            className: true,\r\n          },\r\n        },\r\n        academicYear: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.json(fee);\r\n  } catch (error) {\r\n    console.error(\"Error marking fee as paid:\", error);\r\n    res.status(500).json({ error: \"Failed to mark fee as paid\" });\r\n  }\r\n};\r\n\r\n// GET /api/fees/students - Get students for dropdown\r\nexport const getStudents: RequestHandler = async (req, res) => {\r\n  try {\r\n    const students = await prisma.student.findMany({\r\n      where: { isActive: true },\r\n      select: {\r\n        id: true,\r\n        studentId: true,\r\n        name: true,\r\n        className: true,\r\n        academicYear: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: { name: \"asc\" },\r\n    });\r\n\r\n    res.json(students);\r\n  } catch (error) {\r\n    console.error(\"Error fetching students:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch students\" });\r\n  }\r\n};\r\n\r\n// GET /api/fees/receipt/:id - Generate receipt data\r\nexport const getReceiptData: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const fee = await prisma.fee.findUnique({\r\n      where: { id },\r\n      include: {\r\n        student: {\r\n          select: {\r\n            id: true,\r\n            studentId: true,\r\n            name: true,\r\n            className: true,\r\n          },\r\n        },\r\n        academicYear: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!fee) {\r\n      return res.status(404).json({ error: \"Fee not found\" });\r\n    }\r\n\r\n    if (fee.status !== \"PAID\") {\r\n      return res.status(400).json({ error: \"Fee must be paid to generate receipt\" });\r\n    }\r\n\r\n    res.json(fee);\r\n  } catch (error) {\r\n    console.error(\"Error fetching receipt data:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch receipt data\" });\r\n  }\r\n};\r\n\r\n// GET /api/fees/classes - Get all classes for bulk fee generation\r\nexport const getClasses: RequestHandler = async (req, res) => {\r\n  try {\r\n    const classes = await prisma.class.findMany({\r\n      where: { isActive: true },\r\n      include: {\r\n        teacher: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n        academicYear: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n        _count: {\r\n          select: {\r\n            marks: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: { name: \"asc\" },\r\n    });\r\n\r\n    // Get student count for each class\r\n    const classesWithStudentCount = await Promise.all(\r\n      classes.map(async (cls) => {\r\n        const studentIds = JSON.parse(cls.studentIds || \"[]\");\r\n        const studentCount = await prisma.student.count({\r\n          where: {\r\n            id: { in: studentIds },\r\n            isActive: true,\r\n          },\r\n        });\r\n\r\n        return {\r\n          ...cls,\r\n          studentCount,\r\n        };\r\n      })\r\n    );\r\n\r\n    res.json(classesWithStudentCount);\r\n  } catch (error) {\r\n    console.error(\"Error fetching classes:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch classes\" });\r\n  }\r\n};\r\n\r\n// POST /api/fees/bulk-generate - Generate fees for all students in selected classes\r\nexport const bulkGenerateFees: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { classIds, feeType, amount, dueDate, notes } = req.body;\r\n\r\n    if (!classIds || !Array.isArray(classIds) || classIds.length === 0) {\r\n      return res.status(400).json({ error: \"Class IDs are required\" });\r\n    }\r\n\r\n    if (!feeType || !amount || !dueDate) {\r\n      return res.status(400).json({ error: \"Fee type, amount, and due date are required\" });\r\n    }\r\n\r\n    const createdFees = [];\r\n    const errors = [];\r\n\r\n    for (const classId of classIds) {\r\n      try {\r\n        // Get class details\r\n        const classData = await prisma.class.findUnique({\r\n          where: { id: classId },\r\n          include: {\r\n            academicYear: true,\r\n          },\r\n        });\r\n\r\n        if (!classData) {\r\n          errors.push(`Class with ID ${classId} not found`);\r\n          continue;\r\n        }\r\n\r\n        // Get all students in this class\r\n        const studentIds = JSON.parse(classData.studentIds || \"[]\");\r\n        const students = await prisma.student.findMany({\r\n          where: {\r\n            id: { in: studentIds },\r\n            isActive: true,\r\n          },\r\n        });\r\n\r\n        // Create fees for each student\r\n        for (const student of students) {\r\n          try {\r\n            const fee = await prisma.fee.create({\r\n              data: {\r\n                studentId: student.id,\r\n                academicYearId: classData.academicYearId,\r\n                feeType,\r\n                amount: parseFloat(amount),\r\n                dueDate: new Date(dueDate),\r\n                status: \"PENDING\",\r\n                notes: notes || `Bulk generated for ${classData.name}`,\r\n              },\r\n              include: {\r\n                student: {\r\n                  select: {\r\n                    id: true,\r\n                    studentId: true,\r\n                    name: true,\r\n                    className: true,\r\n                  },\r\n                },\r\n                academicYear: {\r\n                  select: {\r\n                    id: true,\r\n                    name: true,\r\n                  },\r\n                },\r\n              },\r\n            });\r\n            createdFees.push(fee);\r\n          } catch (error) {\r\n            errors.push(`Failed to create fee for student ${student.name}: ${error}`);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        errors.push(`Failed to process class ${classId}: ${error}`);\r\n      }\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      createdCount: createdFees.length,\r\n      fees: createdFees,\r\n      errors: errors.length > 0 ? errors : undefined,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error bulk generating fees:\", error);\r\n    res.status(500).json({ error: \"Failed to bulk generate fees\" });\r\n  }\r\n};\r\n","import { RequestHandler } from 'express';\r\nimport prisma from '../lib/prisma';\r\n\r\n// Get all academic years\r\nexport const handleGetAcademicYears: RequestHandler = async (req, res) => {\r\n  try {\r\n    const academicYears = await prisma.academicYear.findMany({\r\n      orderBy: { name: 'desc' },\r\n      include: {\r\n        _count: {\r\n          select: {\r\n            students: true,\r\n            classes: true,\r\n            marks: true,\r\n            attendances: true,\r\n            fees: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json(academicYears);\r\n  } catch (error) {\r\n    console.error('Error fetching academic years:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Create new academic year\r\nexport const handleCreateAcademicYear: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { name, startDate, endDate } = req.body;\r\n\r\n    if (!name || !startDate || !endDate) {\r\n      return res.status(400).json({ error: 'Name, start date, and end date are required' });\r\n    }\r\n\r\n    // Check if year already exists\r\n    const existingYear = await prisma.academicYear.findUnique({\r\n      where: { name }\r\n    });\r\n\r\n    if (existingYear) {\r\n      return res.status(400).json({ error: 'Academic year already exists' });\r\n    }\r\n\r\n    const academicYear = await prisma.academicYear.create({\r\n      data: {\r\n        name,\r\n        startDate: new Date(startDate),\r\n        endDate: new Date(endDate),\r\n        isCurrent: false,\r\n        isActive: true\r\n      }\r\n    });\r\n\r\n    res.status(201).json(academicYear);\r\n  } catch (error) {\r\n    console.error('Error creating academic year:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Update academic year\r\nexport const handleUpdateAcademicYear: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, startDate, endDate, isCurrent, isActive } = req.body;\r\n\r\n    // If setting as current, unset all other current years\r\n    if (isCurrent) {\r\n      await prisma.academicYear.updateMany({\r\n        where: { isCurrent: true },\r\n        data: { isCurrent: false }\r\n      });\r\n    }\r\n\r\n    const updateData: any = {};\r\n    if (name) updateData.name = name;\r\n    if (startDate) updateData.startDate = new Date(startDate);\r\n    if (endDate) updateData.endDate = new Date(endDate);\r\n    if (typeof isCurrent === 'boolean') updateData.isCurrent = isCurrent;\r\n    if (typeof isActive === 'boolean') updateData.isActive = isActive;\r\n\r\n    const academicYear = await prisma.academicYear.update({\r\n      where: { id },\r\n      data: updateData,\r\n      include: {\r\n        _count: {\r\n          select: {\r\n            students: true,\r\n            classes: true,\r\n            marks: true,\r\n            attendances: true,\r\n            fees: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    res.json(academicYear);\r\n  } catch (error) {\r\n    console.error('Error updating academic year:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Delete academic year (only if no students)\r\nexport const handleDeleteAcademicYear: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    // Check if year has students\r\n    const studentCount = await prisma.student.count({\r\n      where: { academicYearId: id }\r\n    });\r\n\r\n    if (studentCount > 0) {\r\n      return res.status(400).json({ \r\n        error: 'Cannot delete academic year with students. Please archive it instead.' \r\n      });\r\n    }\r\n\r\n    await prisma.academicYear.delete({\r\n      where: { id }\r\n    });\r\n\r\n    res.json({ message: 'Academic year deleted successfully' });\r\n  } catch (error) {\r\n    console.error('Error deleting academic year:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Set current academic year\r\nexport const handleSetCurrentAcademicYear: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    // Unset all other current years\r\n    await prisma.academicYear.updateMany({\r\n      where: { isCurrent: true },\r\n      data: { isCurrent: false }\r\n    });\r\n\r\n    // Set the selected year as current\r\n    const academicYear = await prisma.academicYear.update({\r\n      where: { id },\r\n      data: { isCurrent: true }\r\n    });\r\n\r\n    res.json(academicYear);\r\n  } catch (error) {\r\n    console.error('Error setting current academic year:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Get current academic year\r\nexport const handleGetCurrentAcademicYear: RequestHandler = async (req, res) => {\r\n  try {\r\n    const currentYear = await prisma.academicYear.findFirst({\r\n      where: { isCurrent: true }\r\n    });\r\n\r\n    if (!currentYear) {\r\n      return res.status(404).json({ error: 'No current academic year found' });\r\n    }\r\n\r\n    res.json(currentYear);\r\n  } catch (error) {\r\n    console.error('Error fetching current academic year:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\n\n// Auth\nimport { handleLogin, handleRegister, handleGetMe } from \"./routes/auth\";\nimport { authMiddleware, adminOnly } from \"./lib/auth\";\n\n// Students\nimport {\n  handleGetStudents,\n  handleGetStudent,\n  handleCreateStudent,\n  handleUpdateStudent,\n  handleDeleteStudent,\n  handleGetStudentResults,\n  handleGetAllPublicResults\n} from \"./routes/students\";\n\n// Teachers\nimport {\n  handleGetTeachers,\n  handleGetTeacher,\n  handleUpdateTeacher,\n  handleGetTeacherClasses\n} from \"./routes/teachers\";\n\n// Marks\nimport {\n  handleGetMarksByClass,\n  handleUpsertMark,\n  handleSubmitMarks,\n  handleApproveMarks,\n  handlePublishResults,\n  handleCloseResults\n} from \"./routes/marks\";\n\n// Attendance\nimport {\n  handleGetAttendance,\n  handleMarkAttendance,\n  handleGetAttendanceStats\n} from \"./routes/attendance\";\n\n\n// Fees\nimport {\n  getFees,\n  createFee,\n  updateFee,\n  deleteFee,\n  markAsPaid,\n  getStudents,\n  getReceiptData,\n  getClasses,\n  bulkGenerateFees\n} from \"./routes/fees\";\n\n// Academic Years\nimport {\n  handleGetAcademicYears,\n  handleCreateAcademicYear,\n  handleUpdateAcademicYear,\n  handleDeleteAcademicYear,\n  handleSetCurrentAcademicYear,\n  handleGetCurrentAcademicYear\n} from \"./routes/academic-years\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Root route - API info\n  app.get(\"/\", (_req, res) => {\n    res.json({\n      name: \"Darul Umah School Management System API\",\n      version: \"1.0.0\",\n      status: \"✅ Running\",\n      endpoints: {\n        health: \"/api/ping\",\n        auth: {\n          login: \"POST /api/auth/login\",\n          register: \"POST /api/auth/register\",\n          me: \"GET /api/auth/me\"\n        },\n        public: {\n          allResults: \"GET /api/public/results\",\n          studentResults: \"GET /api/public/results/:studentId\"\n        },\n        students: \"GET /api/students\",\n        teachers: \"GET /api/teachers\",\n        marks: \"GET /api/marks/class/:classId\",\n        attendance: \"GET /api/attendance\",\n        fees: \"GET /api/fees\"\n      },\n      documentation: \"See SETUP.md for full API documentation\"\n    });\n  });\n\n  // Health check\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"pong\" });\n  });\n\n  // Demo route\n  app.get(\"/api/demo\", handleDemo);\n\n  // ===== PUBLIC ROUTES =====\n  \n  // Authentication\n  app.post(\"/api/auth/login\", handleLogin);\n  app.post(\"/api/auth/register\", handleRegister);\n  \n  // Public student results\n  app.get(\"/api/public/results\", handleGetAllPublicResults);\n  app.get(\"/api/public/results/:studentId\", handleGetStudentResults);\n\n  // ===== PROTECTED ROUTES =====\n\n  // Get current user\n  app.get(\"/api/auth/me\", authMiddleware, handleGetMe);\n\n  // Students (Teachers can read, Admin can CRUD)\n  app.get(\"/api/students\", authMiddleware, handleGetStudents);\n  app.get(\"/api/students/:id\", authMiddleware, handleGetStudent);\n  app.post(\"/api/students\", authMiddleware, adminOnly, handleCreateStudent);\n  app.put(\"/api/students/:id\", authMiddleware, adminOnly, handleUpdateStudent);\n  app.delete(\"/api/students/:id\", authMiddleware, adminOnly, handleDeleteStudent);\n\n  // Teachers (Admin only for CRUD, Teachers can read own)\n  app.get(\"/api/teachers\", authMiddleware, handleGetTeachers);\n  app.get(\"/api/teachers/:id\", authMiddleware, handleGetTeacher);\n  app.put(\"/api/teachers/:id\", authMiddleware, handleUpdateTeacher);\n  app.get(\"/api/teachers/me/classes\", authMiddleware, handleGetTeacherClasses);\n\n  // Marks (Teachers can CRUD draft, Admin can approve/publish)\n  app.get(\"/api/marks/class/:classId\", authMiddleware, handleGetMarksByClass);\n  app.post(\"/api/marks\", authMiddleware, handleUpsertMark);\n  app.post(\"/api/marks/submit\", authMiddleware, handleSubmitMarks);\n  app.post(\"/api/marks/approve\", authMiddleware, adminOnly, handleApproveMarks);\n  app.post(\"/api/marks/publish\", authMiddleware, adminOnly, handlePublishResults);\n  app.post(\"/api/marks/close\", authMiddleware, adminOnly, handleCloseResults);\n\n  // Attendance (Teachers can mark, both can read)\n  app.get(\"/api/attendance\", authMiddleware, handleGetAttendance);\n  app.post(\"/api/attendance\", authMiddleware, handleMarkAttendance);\n  app.get(\"/api/attendance/stats\", authMiddleware, handleGetAttendanceStats);\n\n\n  // Fees (Admin only)\n  app.get(\"/api/fees\", authMiddleware, adminOnly, getFees);\n  app.post(\"/api/fees\", authMiddleware, adminOnly, createFee);\n  app.put(\"/api/fees/:id\", authMiddleware, adminOnly, updateFee);\n  app.delete(\"/api/fees/:id\", authMiddleware, adminOnly, deleteFee);\n  app.patch(\"/api/fees/:id/paid\", authMiddleware, adminOnly, markAsPaid);\n  app.get(\"/api/fees/students\", authMiddleware, adminOnly, getStudents);\n  app.get(\"/api/fees/classes\", authMiddleware, adminOnly, getClasses);\n  app.post(\"/api/fees/bulk-generate\", authMiddleware, adminOnly, bulkGenerateFees);\n  app.get(\"/api/fees/receipt/:id\", authMiddleware, adminOnly, getReceiptData);\n\n  // Academic Years (Admin only)\n  app.get(\"/api/academic-years\", authMiddleware, adminOnly, handleGetAcademicYears);\n  app.post(\"/api/academic-years\", authMiddleware, adminOnly, handleCreateAcademicYear);\n  app.put(\"/api/academic-years/:id\", authMiddleware, adminOnly, handleUpdateAcademicYear);\n  app.delete(\"/api/academic-years/:id\", authMiddleware, adminOnly, handleDeleteAcademicYear);\n  app.patch(\"/api/academic-years/:id/set-current\", authMiddleware, adminOnly, handleSetCurrentAcademicYear);\n  app.get(\"/api/academic-years/current\", handleGetCurrentAcademicYear);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\n// Use a more specific pattern to avoid path-to-regexp issues\napp.get(\"/*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["prisma","app","express"],"mappings":"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"}